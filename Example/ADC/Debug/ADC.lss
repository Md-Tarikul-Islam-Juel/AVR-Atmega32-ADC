
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000252  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000016f  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000203  00000000  00000000  00000647  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001d4  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001d7  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  00000c77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  54:	aa 00       	.word	0x00aa	; ????
  56:	ae 00       	.word	0x00ae	; ????
  58:	b0 00       	.word	0x00b0	; ????
  5a:	b2 00       	.word	0x00b2	; ????
  5c:	b6 00       	.word	0x00b6	; ????
  5e:	b8 00       	.word	0x00b8	; ????
  60:	bc 00       	.word	0x00bc	; ????
  62:	c0 00       	.word	0x00c0	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:


int main(void)
{
	uint16_t DATA1;
	DDRC |=(1<<PC0)|(1<<PC4);
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	81 61       	ori	r24, 0x11	; 17
  80:	84 bb       	out	0x14, r24	; 20

	ADC_INIT(128,AVCC);
  82:	61 e0       	ldi	r22, 0x01	; 1
  84:	80 e8       	ldi	r24, 0x80	; 128
  86:	0e 94 93 00 	call	0x126	; 0x126 <ADC_INIT>
	

	while(1)

	{	DATA1 = ADC_READ(7);
  8a:	87 e0       	ldi	r24, 0x07	; 7
  8c:	0e 94 9e 00 	call	0x13c	; 0x13c <ADC_READ>


		if (DATA1>=512)
  90:	81 15       	cp	r24, r1
  92:	92 40       	sbci	r25, 0x02	; 2
  94:	10 f0       	brcs	.+4      	; 0x9a <main+0x1e>
		{
			PORTC |=(1<<PC0);
  96:	a8 9a       	sbi	0x15, 0	; 21
  98:	f8 cf       	rjmp	.-16     	; 0x8a <main+0xe>
		}
		else
		{
			PORTC &= ~(1<<PC0);
  9a:	a8 98       	cbi	0x15, 0	; 21
  9c:	f6 cf       	rjmp	.-20     	; 0x8a <main+0xe>

0000009e <ADC_PRESCALER_SET>:
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// This function selects sampling frequency of ADC by selecting the prescaler bit
// if we set ADC Prescaler 128 means (Division Factor 128 to maintain ADC sampling frequency below 250KHz)(16MHz/128=125KHz)
void ADC_PRESCALER_SET(uint8_t prescaler)
{
	ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0)) ; // clear ADPS2:ADPS0 for initialization
  9e:	96 b1       	in	r25, 0x06	; 6
  a0:	98 7f       	andi	r25, 0xF8	; 248
  a2:	96 b9       	out	0x06, r25	; 6
	
	switch(prescaler)
  a4:	80 31       	cpi	r24, 0x10	; 16
  a6:	b9 f0       	breq	.+46     	; 0xd6 <ADC_PRESCALER_SET+0x38>
  a8:	38 f4       	brcc	.+14     	; 0xb8 <ADC_PRESCALER_SET+0x1a>
  aa:	84 30       	cpi	r24, 0x04	; 4
  ac:	71 f0       	breq	.+28     	; 0xca <ADC_PRESCALER_SET+0x2c>
  ae:	88 30       	cpi	r24, 0x08	; 8
  b0:	71 f0       	breq	.+28     	; 0xce <ADC_PRESCALER_SET+0x30>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	f1 f4       	brne	.+60     	; 0xf2 <ADC_PRESCALER_SET+0x54>
  b6:	07 c0       	rjmp	.+14     	; 0xc6 <ADC_PRESCALER_SET+0x28>
  b8:	80 34       	cpi	r24, 0x40	; 64
  ba:	99 f0       	breq	.+38     	; 0xe2 <ADC_PRESCALER_SET+0x44>
  bc:	80 38       	cpi	r24, 0x80	; 128
  be:	a9 f0       	breq	.+42     	; 0xea <ADC_PRESCALER_SET+0x4c>
  c0:	80 32       	cpi	r24, 0x20	; 32
  c2:	b9 f4       	brne	.+46     	; 0xf2 <ADC_PRESCALER_SET+0x54>
  c4:	0a c0       	rjmp	.+20     	; 0xda <ADC_PRESCALER_SET+0x3c>
	{
		case 2:ADCSRA |= (1<<ADPS0);//-----------------------------------  0 0 1
  c6:	30 9a       	sbi	0x06, 0	; 6
			   break;
  c8:	08 95       	ret
		case 4:ADCSRA |= (1<<ADPS1);//-----------------------------------  0 1 0
  ca:	31 9a       	sbi	0x06, 1	; 6
			   break;
  cc:	08 95       	ret
		case 8:ADCSRA |= (1<<ADPS1) | (1<<ADPS0);//----------------------  0 1 1
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	83 60       	ori	r24, 0x03	; 3
  d2:	86 b9       	out	0x06, r24	; 6
			   break;
  d4:	08 95       	ret
		case 16:ADCSRA |= (1<<ADPS2);//----------------------------------  1 0 0
  d6:	32 9a       	sbi	0x06, 2	; 6
			   break;
  d8:	08 95       	ret
		case 32:ADCSRA |= (1<<ADPS2) | (1<<ADPS0);//---------------------  1 0 1
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	85 60       	ori	r24, 0x05	; 5
  de:	86 b9       	out	0x06, r24	; 6
			   break;
  e0:	08 95       	ret
		case 64:ADCSRA |= (1<<ADPS2) | (1<<ADPS1);//---------------------  1 1 0
  e2:	86 b1       	in	r24, 0x06	; 6
  e4:	86 60       	ori	r24, 0x06	; 6
  e6:	86 b9       	out	0x06, r24	; 6
			   break;
  e8:	08 95       	ret
		case 128:ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);//-------  1 1 1
  ea:	86 b1       	in	r24, 0x06	; 6
  ec:	87 60       	ori	r24, 0x07	; 7
  ee:	86 b9       	out	0x06, r24	; 6
			   break;
  f0:	08 95       	ret
		default:ADCSRA &= (~(1<<ADPS2)) & (~(1<<ADPS1)) & (~(1<<ADPS0));// 0 0 0 
  f2:	86 b1       	in	r24, 0x06	; 6
  f4:	88 7f       	andi	r24, 0xF8	; 248
  f6:	86 b9       	out	0x06, r24	; 6
  f8:	08 95       	ret

000000fa <ADC_voltage_Reference>:
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//This function selects the voltage reference
//by default AVCC has been selected
void ADC_voltage_Reference(uint8_t Reference_Voltage)
{
	ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1)); // clear REFS1:REFS0 for initialization
  fa:	97 b1       	in	r25, 0x07	; 7
  fc:	9f 73       	andi	r25, 0x3F	; 63
  fe:	97 b9       	out	0x07, r25	; 7
	ADMUX |= (1<<REFS0); // Default AVCC has been set
 100:	3e 9a       	sbi	0x07, 6	; 7
	
	
	if(Reference_Voltage==AREF){ADMUX &= (~(1<<REFS0)) & (~(1<<REFS1));}
 102:	81 11       	cpse	r24, r1
 104:	04 c0       	rjmp	.+8      	; 0x10e <ADC_voltage_Reference+0x14>
 106:	87 b1       	in	r24, 0x07	; 7
 108:	8f 73       	andi	r24, 0x3F	; 63
 10a:	87 b9       	out	0x07, r24	; 7
 10c:	08 95       	ret
	else if (Reference_Voltage==AVCC){ADMUX |= (1<<REFS0);}
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	11 f4       	brne	.+4      	; 0x116 <ADC_voltage_Reference+0x1c>
 112:	3e 9a       	sbi	0x07, 6	; 7
 114:	08 95       	ret
	else if (Reference_Voltage==INTERNAL){ADMUX |= (1<<REFS1) | (1<<REFS0);}
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	21 f4       	brne	.+8      	; 0x122 <ADC_voltage_Reference+0x28>
 11a:	87 b1       	in	r24, 0x07	; 7
 11c:	80 6c       	ori	r24, 0xC0	; 192
 11e:	87 b9       	out	0x07, r24	; 7
 120:	08 95       	ret
	else{ADMUX |= (1<<REFS0);}
 122:	3e 9a       	sbi	0x07, 6	; 7
 124:	08 95       	ret

00000126 <ADC_INIT>:
------------possible parameter---------
prescaler = 2,4,8,16,32,64,128
 Voltage_Reference = AREF,AVCC,INTERNAL 
*/
void ADC_INIT(uint8_t prescaler, uint8_t Voltage_Reference)
{	
 126:	cf 93       	push	r28
 128:	c6 2f       	mov	r28, r22
	2) set prescaler
	3) reference voltage select
	4) left adjust of for data register
	*/

	ADCSRA |= (1<<ADEN); // ADC Enable
 12a:	37 9a       	sbi	0x06, 7	; 6
	ADC_PRESCALER_SET(prescaler); // set sampling frequency by prescaler bit
 12c:	0e 94 4f 00 	call	0x9e	; 0x9e <ADC_PRESCALER_SET>
	ADC_voltage_Reference(Voltage_Reference); //set voltage reference //by default AVCC has been selected
 130:	8c 2f       	mov	r24, r28
 132:	0e 94 7d 00 	call	0xfa	; 0xfa <ADC_voltage_Reference>
	ADMUX &= ~(1<<ADLAR); //left adjust off // Though bu default left adjust off // this line use for more convenient for future developer
 136:	3d 98       	cbi	0x07, 5	; 7
}
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <ADC_READ>:

//########################################################################################
//########################################################################################
uint16_t ADC_READ(uint8_t channel)
{
	ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
 13c:	97 b1       	in	r25, 0x07	; 7
 13e:	90 7e       	andi	r25, 0xE0	; 224
 140:	97 b9       	out	0x07, r25	; 7
	
	switch(channel)
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	88 30       	cpi	r24, 0x08	; 8
 146:	91 05       	cpc	r25, r1
 148:	f8 f4       	brcc	.+62     	; 0x188 <ADC_READ+0x4c>
 14a:	fc 01       	movw	r30, r24
 14c:	e6 5d       	subi	r30, 0xD6	; 214
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__tablejump2__>
	{
		case 0:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); //---------- 0 0 0 0 0
 154:	87 b1       	in	r24, 0x07	; 7
 156:	80 7e       	andi	r24, 0xE0	; 224
 158:	87 b9       	out	0x07, r24	; 7
			   break;
 15a:	19 c0       	rjmp	.+50     	; 0x18e <ADC_READ+0x52>
		case 1:ADMUX |= (1<<MUX0);//-------------------------------------------------------------------------- 0 0 0 0 1
 15c:	38 9a       	sbi	0x07, 0	; 7
			   break;
 15e:	17 c0       	rjmp	.+46     	; 0x18e <ADC_READ+0x52>
		case 2:ADMUX |= (1<<MUX1);//-------------------------------------------------------------------------- 0 0 0 1 0
 160:	39 9a       	sbi	0x07, 1	; 7
		       break;
 162:	15 c0       	rjmp	.+42     	; 0x18e <ADC_READ+0x52>
		case 3:ADMUX |= (1<<MUX1) | (1<<MUX0);//-------------------------------------------------------------- 0 0 0 1 1
 164:	87 b1       	in	r24, 0x07	; 7
 166:	83 60       	ori	r24, 0x03	; 3
 168:	87 b9       	out	0x07, r24	; 7
			   break;
 16a:	11 c0       	rjmp	.+34     	; 0x18e <ADC_READ+0x52>
		case 4:ADMUX |= (1<<MUX2);//-------------------------------------------------------------------------- 0 0 1 0 0
 16c:	3a 9a       	sbi	0x07, 2	; 7
			   break;
 16e:	0f c0       	rjmp	.+30     	; 0x18e <ADC_READ+0x52>
		case 5:ADMUX |= (1<<MUX2) | (1<<MUX0);//-------------------------------------------------------------- 0 0 1 0 1
 170:	87 b1       	in	r24, 0x07	; 7
 172:	85 60       	ori	r24, 0x05	; 5
 174:	87 b9       	out	0x07, r24	; 7
			   break;
 176:	0b c0       	rjmp	.+22     	; 0x18e <ADC_READ+0x52>
		case 6:ADMUX |= (1<<MUX2) | (1<<MUX1);//-------------------------------------------------------------- 0 0 1 1 0
 178:	87 b1       	in	r24, 0x07	; 7
 17a:	86 60       	ori	r24, 0x06	; 6
 17c:	87 b9       	out	0x07, r24	; 7
			   break;
 17e:	07 c0       	rjmp	.+14     	; 0x18e <ADC_READ+0x52>
		case 7:ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);//-------------------------------------------------- 0 0 1 1 1
 180:	87 b1       	in	r24, 0x07	; 7
 182:	87 60       	ori	r24, 0x07	; 7
 184:	87 b9       	out	0x07, r24	; 7
			   break;
 186:	03 c0       	rjmp	.+6      	; 0x18e <ADC_READ+0x52>
		default:ADMUX &= (~(1<<MUX4)) & (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0)); // set channel ADC0 default
 188:	87 b1       	in	r24, 0x07	; 7
 18a:	80 7e       	andi	r24, 0xE0	; 224
 18c:	87 b9       	out	0x07, r24	; 7
	}
	ADCSRA |=(1<<ADSC); // ADC conversion start
 18e:	36 9a       	sbi	0x06, 6	; 6
	
	while((ADCSRA & (1<<ADIF)) == 0){}; // wait for end conversion ( after conversion ADIF bit will be set automatically )
 190:	34 9b       	sbis	0x06, 4	; 6
 192:	fe cf       	rjmp	.-4      	; 0x190 <ADC_READ+0x54>
	//uint8_t high,low;
	//high=ADCH;
	//low=ADCL;
	return ADCW;// when conversion finished all data will be stored in ADCW
 194:	84 b1       	in	r24, 0x04	; 4
 196:	95 b1       	in	r25, 0x05	; 5

}
 198:	08 95       	ret

0000019a <__tablejump2__>:
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31

0000019e <__tablejump__>:
 19e:	05 90       	lpm	r0, Z+
 1a0:	f4 91       	lpm	r31, Z
 1a2:	e0 2d       	mov	r30, r0
 1a4:	09 94       	ijmp

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
